package dataAccess;

import dataAccess.exceptions.DataAccessException;
import model.GameData;

import java.sql.*;
import java.util.ArrayList;
import java.util.Collection;

public class MySqlGameDao implements IGameDao {

    public MySqlGameDao() throws DataAccessException {
        String createTableSQL = """
            CREATE TABLE IF NOT EXISTS game (
                `gameId` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
                `whiteUsername` VARCHAR(255) NOT NULL,
                `blackUsername` VARCHAR(255) NOT NULL,
                `gameName` VARCHAR(255) NOT NULL
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
            """;
        DatabaseManager.executeUpdate(createTableSQL);
    }

    @Override
    public int insertGame(GameData game) throws DataAccessException {
        String insertSQL = "INSERT INTO game (whiteUsername, blackUsername, gameName) VALUES (?, ?, ?);";
        int gameId = DatabaseManager.executeUpdate(insertSQL, game.whiteUsername(), game.blackUsername(), game.gameName());
        return gameId; // This should be the autogenerated ID from the database
    }

    @Override
    public GameData getGame(int gameId) throws DataAccessException {
        String selectSQL = "SELECT gameId, whiteUsername, blackUsername, gameName FROM game WHERE gameId = ?;";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement ps = conn.prepareStatement(selectSQL)) {
            ps.setInt(1, gameId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return new GameData(rs.getInt("gameId"), rs.getString("whiteUsername"), rs.getString("blackUsername"), rs.getString("gameName"));
                }
            }
        } catch (SQLException e) {
            throw new DataAccessException("Unable to get game with ID: " + gameId, e);
        }
        return null;
    }

    @Override
    public void updateGame(GameData game) throws DataAccessException {
        String updateSQL = "UPDATE game SET whiteUsername = ?, blackUsername = ?, gameName = ? WHERE gameId = ?;";
        DatabaseManager.executeUpdate(updateSQL, game.whiteUsername(), game.blackUsername(), game.gameName(), game.gameID());
    }

    @Override
    public Collection<GameData> listGames() throws DataAccessException {
        Collection<GameData> games = new ArrayList<>();
        String selectSQL = "SELECT gameId, whiteUsername, blackUsername, gameName FROM game;";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement ps = conn.prepareStatement(selectSQL);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                games.add(new GameData(rs.getInt("gameId"), rs.getString("whiteUsername"), rs.getString("blackUsername"), rs.getString("gameName")));
            }
        } catch (SQLException e) {
            throw new DataAccessException("Unable to list games", e);
        }
        return games;
    }

    @Override
    public void clear() throws DataAccessException {
        String truncateSQL = "TRUNCATE game;";
        DatabaseManager.executeUpdate(truncateSQL);
    }
}
